name: Multiarch build

on:
  workflow_call:
    inputs:
      dockerfile:
        required: false
        description: "Path to the Dockerfile"
        type: string
      image:
        required: true
        description: "Image name to utilise"
        type: string
      package:
        required: true
        description: "Package name for which the version wants to be known"
        type: string
      username:
        required: true
        description: "Username to utilise for pushing images to the registry"
        type: string
    secrets:
      access-token:
        required: true
        description: "Token to authenticate against the registry for pushing images"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.username }}
          password: ${{ secrets.access-token }}
        if: ${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            Dockerfile
          sparse-checkout-cone-mode: false
          submodules: true

      - name: Set release version
        id: release-version
        run: |
          set -e
          RELEASE_VERSION=$(grep -i "ENV ${{ inputs.image }}_VERSION" ${{ inputs.dockerfile }} | cut -d "=" -f 2 | sed 's/"//g')
          if [ -z "$RELEASE_VERSION" ]; then
            echo "Error: Unable to extract package version from Dockerfile."
            exit 1
          fi
          echo "release-version=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "Successfully extracted version: $RELEASE_VERSION"

      - name: Set build date
        id: build-date
        run: |
          set -e
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          if [ -z "$BUILD_DATE" ]; then
            echo "Error: Unable to set build date."
            exit 1
          fi
          echo "build-date=${BUILD_DATE}" >> $GITHUB_ENV
          echo "Successfully set build date: $BUILD_DATE"

      - name: Set revision
        id: revision
        run: |
          set -e
          REVISION=$(git rev-parse HEAD)
          if [ -z "$REVISION" ]; then
            echo "Error: Unable to set revision."
            exit 1
          fi
          echo "revision=${REVISION}" >> $GITHUB_ENV
          echo "Successfully set revision: $REVISION"

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch }}
          file: ${{ inputs.dockerfile }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_DATE=${{ env.build-date }}
            REVISION=${{ env.revision }}
            VERSION=${{ env.release-version }}
          tags: |
            ${{ inputs.username }}/${{ inputs.image }}:${{ env.release-version }}
            ${{ inputs.username }}/${{ inputs.image }}:latest
            ghcr.io/${{ inputs.username }}/${{ inputs.image }}:${{ env.release-version }}
            ghcr.io/${{ inputs.username }}/${{ inputs.image }}:latest
